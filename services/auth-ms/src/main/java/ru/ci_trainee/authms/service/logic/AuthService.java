package ru.ci_trainee.authms.service.logic;

import lombok.RequiredArgsConstructor;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import ru.ci_trainee.authms.dto.request.UserLoginRq;
import ru.ci_trainee.authms.dto.response.JwtRs;
import ru.ci_trainee.authms.exception.exception.PasswordsDoNotMatchException;
import ru.ci_trainee.authms.exception.exception.UserNotFoundException;
import ru.ci_trainee.authms.model.User;
import ru.ci_trainee.authms.security.jwt.JwtTokenProvider;
import ru.ci_trainee.authms.service.entity.UserService;

@Service
@RequiredArgsConstructor
@Transactional(readOnly = true)
public class AuthService {
    private final UserService userService;
    private final PasswordEncoder passwordEncoder;
    private final JwtTokenProvider jwtTokenProvider;
    private final AuthenticationManager authenticationManager;

    @Transactional
    public User register(User user, String passwordConfirmation) {
        if (!user.getPassword().equals(passwordConfirmation))
            throw new PasswordsDoNotMatchException();
        if (user.getId() != null)
            throw new IllegalArgumentException("Id must be generated by server");

        user.setPassword(passwordEncoder.encode(user.getPassword()));

        return userService.create(user);
    }

    @Transactional
    public JwtRs login(UserLoginRq loginRequest) {
        var user = userService.getUser(loginRequest.getUsername());
        if (!user.getIsActive()) throw new UserNotFoundException();

        authenticationManager.authenticate(
                new UsernamePasswordAuthenticationToken(loginRequest.getUsername(), loginRequest.getPassword())
        );

        userService.updateLastLogin(user.getId());

        return JwtRs.builder()
                .id(user.getId())
                .username(user.getUsername())
                .accessToken(jwtTokenProvider.createAccessToken(user))
                .refreshToken(jwtTokenProvider.createRefreshToken(user.getId(), user.getUsername()))
                .build();
    }

    public JwtRs refresh(String refreshToken) {
        return jwtTokenProvider.refreshUserTokens(refreshToken);
    }
}
