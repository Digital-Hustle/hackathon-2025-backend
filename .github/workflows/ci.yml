name: Spring microservices monorepo CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.filter.outputs.services }}
      has_services_changes: ${{ steps.filter.outputs.has_services_changes }}
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v46
        with:
          files: |
            services/**

      - uses: ./.github/actions/list-changed
        with:
          files: ${{ steps.changed-files.outputs.all_changed_files }}

      - name: Determine changed services
        id: filter
        run: |
          CHANGED_FILES="${{ steps.changed-files.outputs.all_changed_files }}"
          
          if [ -z "$CHANGED_FILES" ]; then
            echo "has_services_changes=false" >> $GITHUB_OUTPUT
            echo "services=[]" >> $GITHUB_OUTPUT
            echo "No changes in services detected"
            exit 0
          fi
          
          SERVICES=$(echo "$CHANGED_FILES" | grep -o 'services/[^/]*' | cut -d'/' -f2 | sort | uniq | jq -R -s -c 'split("\n") | map(select(. != ""))')
          
          echo "has_services_changes=true" >> $GITHUB_OUTPUT
          echo "services=${SERVICES}" >> $GITHUB_OUTPUT
          echo "Detected changed services: ${SERVICES}"

  build-and-test:
    needs: detect-changes
    if: needs.detect-changes.outputs.has_services_changes == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: ${{ fromJSON(needs.detect-changes.outputs.services) }}
    steps:
      - uses: actions/checkout@v5

      - name: Set up JDK 21
        uses: actions/setup-java@v5
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Verify service directory
        run: |
          if [ ! -d "services/${{ matrix.service }}" ]; then
            echo "::error::Directory services/${{ matrix.service }} does not exist!"
            exit 1
          fi

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ matrix.service }}-${{ hashFiles('services/${{ matrix.service }}/build.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-${{ matrix.service }}-
            ${{ runner.os }}-gradle-

      - name: Make gradlew executable
        working-directory: ./services/${{ matrix.service }}
        run: |
          if [ -f "gradlew" ]; then
            chmod +x gradlew
          else
            echo "::warning::gradlew not found in ${{ matrix.service }}"
            exit 1
          fi

      - name: build
        working-directory: ./services/${{ matrix.service }}
        run: ./gradlew build -x test

  build-and-push-docker:
    needs: [ detect-changes, build-and-test ]
    if: needs.detect-changes.outputs.has_services_changes == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: ${{ fromJSON(needs.detect-changes.outputs.services) }}
    steps:
      - uses: actions/checkout@v5

      - uses: ./.github/actions/docker-build-and-push
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          token: ${{ secrets.DOCKER_HUB_TOKEN }}
          files: ${{ matrix.service }}